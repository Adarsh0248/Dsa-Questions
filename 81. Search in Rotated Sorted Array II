//https://leetcode.com/problems/search-in-rotated-sorted-array-ii/
class Solution {
    public boolean binarySearch(int [] arr,int target,int low,int hi){
        int mid = 0;
        while(low <=hi){
            mid = low + (hi - low)/2;
            if(arr[mid]== target ) return true;
            else if(arr[mid]<target) low = mid +1;
            else hi = mid -1;
        }
        return false;
    }
    public boolean search(int[] nums, int target) {
        if (nums.length == 1 && nums[0]==target ) return true;
        else if(nums.length == 1 && nums[0]!= target) return false;
        int low = 0;
        int hi = nums.length-1;
        int mid = 0;
        int peak = -1;
        while(low <= hi){
           
            while(low < nums.length-2 && nums[low]==nums[low+1] ) low++;
            if(hi==nums.length-1){
             while(hi>1 && nums[hi]==nums[hi-1]  ) hi--;
            }
             mid = low + (hi - low)/2;
            if( mid <nums.length-1 && nums[mid]>nums[mid+1] ){ peak = mid;
            break;
            }
            else if(nums[mid]>nums[nums.length-1]) low = mid +1;
            else if(nums[mid]==nums[nums.length-1]) {
                if(nums[hi]>mid) low = mid+1;
            else hi--;
            }
            else hi = mid -1;
        }
        if(peak==-1) return  binarySearch(nums,target,0,nums.length -1);
        if(low>hi) peak = hi; 
        if(target < nums[0]) return binarySearch(nums,target,peak+1,nums.length -1);
        else return binarySearch(nums,target,0,peak);
    

    }
}
