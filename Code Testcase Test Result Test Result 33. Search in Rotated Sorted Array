//https://leetcode.com/problems/search-in-rotated-sorted-array/description/
class Solution {
    public int search(int[] nums, int target) {
        
        if (nums.length == 0 && nums[0]==target ) return 0;
        else if(nums.length == 0 && nums[0]!= target) return -1;

        int u =0, v = nums.length-1;
        
        int mid = u +(v-u)/2;
        int peak = 0;
        while(u<v){
            mid = u +(v-u)/2;
            if(mid ==0){
                if(nums[mid]>nums[mid +1]) {
                    peak = mid;
                    break;
                }
                else {
                    peak = mid +1;
                    break;
                }
            }
            if(mid == nums.length-1){
                if(nums[mid]>nums[mid -1]) {
                    peak = mid;
                    break;
                }
                else {
                    peak = mid -1;
                    break;
                }
            }
            if( nums[mid] > nums[mid +1]){
                 peak = mid;
                 break;
            } else if(nums[mid]>nums[nums.length-1]) u = mid+1;
            else v = mid-1;
        }
       if(u>=v) peak = u;
       int ans = -1,s=0,e=peak;
        int a = e+1, b = nums.length-1;
        int m = s + (e-s)/2;
        while (s<= e){
            m = s + (e-s)/2;
            if(nums[m]==target) {
                ans = m;
                break;
            }
            else if(nums[m]<target) s= m+1;
            else e= m-1;
        }
        if(ans == -1){
            while(a<=b){
                m = a + (b-a)/2;
                if(nums[m]==target) {
                    ans = m;
                    break;
                }
                else if(nums[m]<target)a=m+1;
                else b = m-1;

            }
        }
        return ans;

    }
}
